name: destroy-staging

on:
  schedule:
    - cron: '0 */2 * * *'

jobs:
  check-uptime:
    if: ${{ !github.event.act }}
    runs-on: ubuntu-20.04
    outputs:
      should_destroy: ${{ steps.set-should-destroy.outputs.should_destroy }}
    steps:
      - name: Import SSH Private Key
        id: import-secrets
        uses: hashicorp/vault-action@v2.7.1
        with:
          url: https://${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: pt/ssh SSH_PRIVATE_KEY | SSH_PRIVATE_KEY

      - name: SSH_PRIVATE_KEY to cert file
        id: ssh-private-key-to-file
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > ~/.ssh/ssh
          chmod 600 ~/.ssh/ssh

      - name: Setup SSH
        run: sudo apt install openssh-client

      - name: Setup Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: Check Uptime with Cloudflared
        id: check-uptime
        run: |
          BACKEND_UPTIME=${BACKEND_UPTIME:-0}
          FRONTEND_UPTIME=${FRONTEND_UPTIME:-0}
          FRONTEND_UPTIME=$(ssh -o "ProxyCommand=/usr/local/bin/cloudflared access ssh --hostname ssh-staging.pipetimer.com" -o "StrictHostKeyChecking no" -i ~/.ssh/ssh ubuntu@ssh-staging.pipetimer.com cat /proc/uptime | tail -n 1 | awk '{print $1}')
          echo "Frontend Uptime: $FRONTEND_UPTIME"
          echo "FRONTEND_UPTIME=$FRONTEND_UPTIME" >> $GITHUB_ENV
          BACKEND_UPTIME=$(ssh -o "ProxyCommand=/usr/local/bin/cloudflared access ssh --hostname ssh-staging-api.pipetimer.com" -o "StrictHostKeyChecking no" -i ~/.ssh/ssh ubuntu@ssh-staging-api.pipetimer.com cat /proc/uptime | tail -n 1 | awk '{print $1}')
          echo "Backend Uptime: $BACKEND_UPTIME"
          echo "BACKEND_UPTIME=$BACKEND_UPTIME" >> $GITHUB_ENV

      - name: Set Output should_destroy
        id: set-should-destroy
        run: |
          if awk "BEGIN {exit !($BACKEND_UPTIME >= 1 || $FRONTEND_UPTIME >= 1)}"; then
              echo "should_destroy=true" >> "$GITHUB_OUTPUT"
          else
              echo "should_destroy=false" >> "$GITHUB_OUTPUT"
          fi

  destroy-staging:
    timeout-minutes: 5
    needs: check-uptime
    if: needs.check-uptime.outputs.should_destroy == 'true'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        workdir: [ 'backend', 'frontend' ]
    env:
      SHOULD_DESTROY: ${{ needs.check-uptime.outputs.should_destroy }}
      TF_WORKSPACE: ${{ needs.set-base-ref.outputs.base_ref }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - uses: hashicorp/setup-terraform@v1.4.0

      - name: Import Secrets
        id: import-cred-secrets
        uses: hashicorp/vault-action@v2.7.1
        with:
          url: https://${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            pt/env/staging AWS_REGION | AWS_REGION;
            pt/env/staging AWS_ACCESS_KEY_ID | AWS_ACCESS_KEY_ID;
            pt/env/staging AWS_SECRET_ACCESS_KEY | AWS_SECRET_ACCESS_KEY;

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2.7.1
        with:
          url: https://${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            pt/env/staging $.$;

      - name: Secrets to json
        run: |
          touch secrets.json
          echo "${{ toJson(steps.import-secrets.outputs) }}" > secrets.json

      - name: Json to dotenv
        run: |
          mkdir -p ./env
          touch ./env/.staging.env
          awk -F '[:,]' '/__/{ gsub(/ |\042|\{|\}/,""); gsub(/\$/,"\\$"); print $2 "=" $3}' secrets.json > ./env/.staging.env

      - name: Terraform Init Staging
        id: init-staging
        run: terraform -chdir=./infra/tf/staging/applications/${{ matrix.workdir }} init

      - name: Terraform Destroy Tunnel
        id: destroy-tunnel
        run: terraform -chdir=./infra/tf/staging/applications/${{ matrix.workdir }} destroy -target=null_resource.cleanup_tunnel -auto-approve

      - name: Terraform Destroy Staging
        id: destroy-staging
        run: |
          retry_count=0
          max_retries=3

          while [[ "$retry_count" -lt "$max_retries" ]]; do
            terraform -chdir=./infra/tf/staging/applications/${{ matrix.workdir }} destroy -auto-approve && break
            retry_count=$((retry_count + 1))
            echo "Terraform Destroy failed. Retrying ($retry_count/$max_retries)..."
            sleep 3
          done

          if [[ "$retry_count" -eq "$max_retries" ]]; then
            echo "Terraform Destroy failed after $max_retries attempts. Exiting."
            exit 1
          fi
