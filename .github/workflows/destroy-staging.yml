name: destroy-staging

on:
  schedule:
    - cron: '*/30 * * * *'

jobs:
  check-uptime:
    runs-on: ubuntu-20.04
    steps:
      - name: Import SSH Private Key
        id: import-secrets
        uses: hashicorp/vault-action@v2.7.1
        with:
          url: https://${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: pt/ssh SSH_PRIVATE_KEY | SSH_PRIVATE_KEY

      - name: SSH_PRIVATE_KEY to cert file
        id: ssh-private-key-to-file
        run: |
          echo "$SSH_PRIVATE_KEY" | base64 --decode > ~/.ssh/ssh
          chmod 600 ~/.ssh/ssh

      - name: Setup SSH
        run: sudo apt install openssh-client

      - name: Setup Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: Check Uptime with Cloudflared
        id: check-uptime
        run: |
          FRONTEND_UPTIME=$(ssh -o "ProxyCommand=/usr/local/bin/cloudflared access ssh --hostname ssh-staging.pipetimer.com" -o "StrictHostKeyChecking no" -i ~/.ssh/ssh ubuntu@ssh-staging.pipetimer.com cat /proc/uptime | tail -n 1 | awk '{print $1}')
          echo "FRONTEND_UPTIME=FRONTEND_UPTIME" >> $GITHUB_OUTPUT
          BACKEND_UPTIME=$(ssh -o "ProxyCommand=/usr/local/bin/cloudflared access ssh --hostname ssh-staging.pipetimer.com" -o "StrictHostKeyChecking no" -i ~/.ssh/ssh ubuntu@staging-api.pipetimer.com cat /proc/uptime | tail -n 1 | awk '{print $1}')
          echo "BACKEND_UPTIME=BACKEND_UPTIME" >> $GITHUB_OUTPUT

  destroy-staging:
    if: ${{ steps.check-uptime.outputs.FRONTEND_UPTIME }} >= 3600 || ${{ steps.check-uptime.outputs.BACKEND_UPTIME }} >= 3600
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        workdir: ['backend', 'frontend']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - uses: hashicorp/setup-terraform@v1.4.0

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2.7.1
        with:
          url: https://${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: pt/env/staging $.$;

      - name: Secrets to json
        run: |
          touch secrets.json
          echo "${{ toJson(steps.import-secrets.outputs) }}" > secrets.json

      - name: Json to dotenv
        run: |
          mkdir -p ./env
          touch ./env/.staging.env
          awk -F '[:,]' '/__/{ gsub(/ |\042|\{|\}/,""); gsub(/\$/,"\\$"); print $2 "=" $3}' secrets.json > ./env/.staging.env

      - name: Terraform Destroy Staging Server
        id: destroy-staging
        run: terraform -chdir=./infra/tf/staging/applications/${{ matrix.workdir }} destroy -auto-approve
